{"title":"身心障礙者人數佔總人口比率-資料取得、整理及視覺化","markdown":{"yaml":{"title":"身心障礙者人數佔總人口比率-資料取得、整理及視覺化","date":"2024-09-16","description":"展示如何從Excel檔案中提取資料，再以點圖(dot plot)的方式做視覺化。","categories":["R","tidyverse","ggplot","dot plot"],"format":{"html":{"toc":true,"fig-align":"center","fig-asp":0.6,"fig-width":10,"fig-dpi":300}},"editor":"visual"},"headingText":"取得資料並擷取需要的數據","containsRefs":false,"markdown":"\n\n------------------------------------------------------------------------\n\n在這篇文章中，我會展示如何使用R從Excel檔案中提取資料，並整理成需要的形式，最後再將各縣市男性與女性的身心障礙者人數佔總人口數比率以點圖(dot plot)的方式做視覺化。目標的圖表長這樣： ![](img/身心障礙者佔總人口數比率.png){.lightbox}\n\n\n我想取得的資料是：\n\n**2023年各縣市身心障礙者人數佔總人口比率資料，其中包含男性與女性的數據**\n\n## 下載資料\n\n使用的資料是從衛生福利部統計處的[網站](https://dep.mohw.gov.tw/DOS/cp-5337-62357-113.html)下載，在「衛生福利公務統計」\\>「社會福利公務統計一覽表」中的「2.3.1身心障礙者人數按類別及縣市別分」統計表。大致上長這樣：\n\n![](img/截圖.png){fig-align=\"center\"}\n\n統計表是Excel格式，資料內容包含：\n\n-   身心障礙者人數，分男性與女性\n\n-   各類別身心障礙者人數\n\n-   身心障礙者人數佔總人口比率\n\n-   上面三項資料依照各縣市區分\n\n-   從2011年到2023年的資料\n\n我們需要將資料從Excel檔案中提取出來。\n\n## 從Excel表中擷取需要的資料\n\n首先，讓我們先載入需要的library：\n\n```{r}\n#| output: false\nlibrary(tidyverse)\nlibrary(readxl)\n```\n\n-   `tidyverse`是用來整理資料及繪製統計圖表\n\n-   `readxl`則是用來讀取Excel檔案\n\n接著，我們用`readxl`中的`read_xlsx`來讀取人數佔比率的資料：\n\n```{r}\n#| eval: false\nread_xlsx(\"data/2.3.1身心障礙者人數按類別及縣市別分.xlsx\", \n          sheet = \"2023\", \n          range = anchored(\"A8\", dim = c(23, 17)),\n          col_names = as.character(1:17)) |> #從excel檔中提取所需的資料\nselect(\"1\", \"15\",\"16\", \"17\")  |> #挑選需要的變數\nrename(\"region\" = \"1\", #對變數重新命名\n       \"total\" = \"15\",\n       \"male\" = \"16\",\n       \"female\" = \"17\") \n```\n\n我會一項接著一項解釋這段程式碼做了什麼：\n\n-   `read_xlsx`：\n\n    -   第一項要放入Excel檔案的位置。\n\n    -   `sheet`則是指定你要的哪一個資料表，這裡放入`\"2023\"`代表你想要讀取的是名字為「2023」的工作表。如果放入數字的話，則是告訴這個函數要讀取第幾個表，舉例來說，若設定`sheet = 5`則會讀取第5個表。\n\n    -   `range`是用來指定要選取的儲存格範圍。`anchored(\"A8\", dim = c(23, 17))`指定的是儲存格A8向下23列、向右17行的資料。\n\n    -   其他指定資料範圍的方法包括`range = \"B3:D6\"` 來指定一個長方形的左上角及右下角、`range = cell_rows(3:5)`來選取第3到5行的資料，細節可參考[這裡](https://readxl.tidyverse.org/reference/cell-specification.html)。\n\n    -   `col_names = as.character(1:17)`則是暫時給每一個column暫時的名稱。會這麼做的原因是，如果不這麼做，column name中會包含中文，我在寫code的途中這麼做的時候，我的R session不斷地當機，必須改成不包含中文的名稱才能順利讀取資料。\n\n-   從Excel中可以知道第1、15、16、17是我們需要的變數，`select(\"1\", \"15\",\"16\", \"17\")`用來選取我們要的columns。\n\n-   `rename(\"region\" = \"1\", \"total\" = \"15\", \"male\" = \"16\", \"female\" = \"17\")`則是將column name改成更好理解的名稱。\n\n提取出來的資料集，就會包含我們所需要的資料：\n\n```{r}\ndf <- read_xlsx(\"data/2.3.1身心障礙者人數按類別及縣市別分.xlsx\", \n          sheet = \"2023\",\n          range = anchored(\"A8\", dim = c(23, 17)),\n          col_names = as.character(1:17)) |> #從excel檔中提取所需的資料\nselect(\"1\", \"15\",\"16\", \"17\")  |> #挑選需要的變數\nrename(\"region\" = \"1\",\n       \"total\" = \"15\",\n       \"male\" = \"16\",\n       \"female\" = \"17\") #對變數重新命名\n\ndf\n```\n\n# 資料整理\n\n在進入視覺化之前，我們還需對資料做兩項處理：\n\n1.  將地區(region)變數中，縣市英文名稱的部分去除。\n2.  將資料的架構轉換成\"tidy\"的形式，以利使用ggplot來做視覺化。\n\n## 整理地區的文字\n\n你可以觀察到，各縣市的文字中包含縣市的英文，為了能將縣市名稱更簡潔的呈現在圖表中，我們要剔除英文名稱。\n\n首先，我們先將地區名稱中英文的部分分開來：\n\n```{r}\ndf |> separate_wider_delim(\n        cols = region, \n        delim = \" \",\n        names = c(\"region\", \"region_eng\"),\n        too_many = \"drop\"\n    )\n```\n\n-   `separate_wider_delim()`函數的功能是將字串根據某個符號為分界，來分開為不同行。\n\n-   `cols`指定要分開的對象，這裡我們要分開的目標是`region`這一行。\n\n-   `delim`則是指定要以什麼文字或符號分開，這裡我們以中英文之間的空格做區分，所以`delim = \" \"`。\n\n-   `names`是指定你分開後的行要叫什麼名稱。\n\n-   如果以仔細觀察，可以發現`region`中的文字有的包含不只一個空格，因為我們只想以第一個空格做切分，所以設定`too_many = \"drop\"`把多的部分都丟掉\n\n接著我們再把不需要的`region_eng`丟掉，並將`region`中的「總計」轉換成「全國」：\n\n```{r}\ndf <- df |> separate_wider_delim(\n        cols = region, \n        delim = \" \",\n        names = c(\"region\", \"region_eng\"),\n        too_many = \"drop\"\n    ) |> \n    select(-2) |> \n    mutate(\n        region = if_else(region == \"總計\", \"全國\", region)\n    )\ndf\n```\n\n-   `select(-2)`的意思是選擇除了第2行以外的變數。\n\n-   `mutate( region = if_else(region == \"總計\", \"全國\", region) )`則是當`region`中的值是「總計」時用「全國」取代它，其他的時候則保留原本`region`的值。\n\n## 轉換資料架構\n\n我們需要資料是tidy的形式，代表資料集中的每一個行都是一個變數，每一個儲存格中都只儲存一個值(更詳細的定義及解釋可參考[這裡](https://r4ds.hadley.nz/data-tidy))。原本的資料中，性別(gender)這個變數沒有被列在一個行中，而是分別散佈在三個不同的行中，我們可以使用`pivot_longer`做到這件事：\n\n```{r}\ndf <- df |> pivot_longer(\n        cols = c(\"total\", \"male\", \"female\"),\n        names_to = \"gender\",\n        values_to = \"ratio\")\n```\n\n-   `pivot_longer` 是將原本的資料「拉長」，將存於行標題中的資料放到儲存格裡。\n\n-   `cols`指定要轉換的行，我們要將性別的資料放下來到儲存格中，所以設定`cols = c(\"total\", \"male\", \"female\")`。\n\n-   `names_to`指定我們放下來的資料那一行的標題名稱，因為是性別資料，因此設定為`names_to = \"gender\"`。\n\n-   原本在`\"total\", \"male\", \"female\"` 下方的資料是比率，所以透過`values_to = \"ratio\"`將它們命名為`ratio`。\n\n整理完後的資料就會呈現這樣的形式：\n\n```{r}\n#| echo: false\ndf\n```\n\n整理好資料後，我們終於可以進入視覺化的部分。\n\n# 製作視覺化圖表\n\n重新確認我們的目標，我們想要畫出這樣的圖表： ![](img/身心障礙者佔總人口數比率.png){.lightbox}\n\n我會一步一步的說明要如何畫出這樣的圖形。\n\n## 主要圖形\n\n先畫出每個縣市男性與女性比率的點，以及連接的線段：\n\n```{r}\ndf |> \n    filter(gender != \"total\") |>  \n    ggplot(aes(x = ratio, y = region)) +\n    geom_line() +\n    geom_point() \n```\n\n-   因為我們不需要總體的比率，所以用`filter(gender != \"total\")`將它們篩選掉。\n\n-   我們想要將縣市的位置畫在y軸，比率的資料畫在x軸，所以`ggplot`中的`aes`會設定成`aes(x = ratio, y = region)`。\n\n-   `geom_line`及`geom_point`分別畫出線段及點。\n\n為了更容易區分男性及女性的資料，我會將它們塗上不同的顏色。除此之外，還會設定點的大小以及線段的粗細：\n\n```{r}\ndf |> \n    filter(gender != \"total\") |>  \n    ggplot(aes(x = ratio, y = region)) +\n    geom_line(linewidth = 1.5, color = \"#758694\") +\n    geom_point(aes(color = gender), size = 2) \n```\n\n-   `geom_line`中，`linewidth`及`color`是用來調整線的粗細及顏色。\n\n-   `geom_point`中的`aes(color = gender)`則是說我們要根據`gender`這個變數來調整點的顏色。\n\n你應該已經發現了，Ｒ這時沒辦法顯示中文字，我們可以用指定中文字型的方式來解決：\n\n```{r}\ndf |> \n    filter(gender != \"total\") |>  \n    ggplot(aes(x = ratio, y = region)) +\n    geom_line(linewidth = 1.5, color = \"#758694\") +\n    geom_point(aes(color = gender), size = 2) +\n    theme(\n        text = element_text(family = \"Noto Sans TC\")\n    )\n```\n\n-   `theme`函數是用來設定圖表的整體風格的，之後我們會再用到它。\n-   `theme`函數中調整圖案風格的方法大都是以`element_{物件種類}`的方式分做設定。舉例來說，我們要調整的是文字，所以是用`element_text`，如果要調整的物件是線條的話，那就是用`element_line`。\n-   `family = \"Noto Sans TC\"`則是將字體設定為煩繁體中文的思源黑體。\n\n為了保持一致性，我會將縣市間呈現的順序調整成與原始資料集中呈現的一樣。做法是將`region`這個變數調整成Ｒ的factor類型變數，再指定其level，訂定縣市的先後順序。所以我們先做一個表示level的vector：\n\n```{r}\nregion_level <- df |> \n    select(region) |> \n    distinct(region) |> \n    pull() |> \n    rev()\nregion_level\n```\n\n再將`region`轉化為factor：\n\n```{r}\np <- df |> \n    filter(gender != \"total\") |>  \n    ggplot(aes(x = ratio, y = factor(region, region_level))) + #轉換為factor\n    geom_line(linewidth = 1.5, color = \"#758694\") +\n    geom_point(aes(color = gender), size = 2) +\n    theme(\n        text = element_text(family = \"Noto Sans TC\")\n    )\np\n```\n\n## 調整Scale變數\n\n在圖表中，我們在x軸畫出比率的資料，在y軸分別縣市，用顏色區分性別。在ggplot2中，我們可以使用`scale_{aes}_{type}`的方式調整這三項要素呈現的方式，`aes`指的是要設定的要素，`type`則是定義我們設定這個`aes`的方法或要呈現的形式。\n\n**指定不同性別的顏色**\n\n```{r}\np + scale_color_discrete(\n      labels = c(\"女性\", \"男性\"), #改變性別的呈現方式\n      type = c(\"#E76F55\", \"#01B8A9\") #指定顏色\n    )\n```\n\n-   因為要調整的是顏色，所以是`scale_color_{type}`。另外，因為性別是離散的變數，所以是`scale_color_discrete`。\n\n-   `labels`指定的是呈現性別這個變數的標籤，你可以看到右方的圖示改變了。`type`則是指定要呈現的顏色。\n\n**調整x軸標籤的格式**\n\n我們的目標圖形中，x軸的數字是呈現到小數點後一位，我們可以用`scales`這個library來設定：\n\n```{r}\np + scale_x_continuous(\n    labels = scales::label_number(accuracy = 0.1),\n    breaks = seq(3, 9, 1)\n)\n```\n\n-   `scales::label_number(accuracy = 0.1)`是將你所呈現的數字的精準度以0.1為一單位。在`scales` library中，還有其他函數能指定你數值呈現的方式，例如`label_dollar`可以將數字轉化為貨幣的形式，更多細節可以參考[這裡](https://scales.r-lib.org/reference/index.html)。\n\n-   `breaks = seq(3, 9, 1)`則是設定你要呈現標記出數值的地方。用下面這個例子來讓你更暸解其運作方式，如果我們x軸標籤只想要顯示5和8兩個數值：\n\n    ```{r}\n    p + scale_x_continuous(\n        labels = scales::label_number(accuracy = 0.1),\n        breaks = c(5, 8)\n    )\n    ```\n\n將上面2個部分整合起來：\n\n```{r}\np <- p + \n    scale_color_discrete(\n        labels = c(\"女性\", \"男性\"), #性別標籤\n        type = c(\"#E76F55\", \"#01B8A9\") #指定顏色\n    ) +\n    scale_x_continuous(\n        labels = scales::label_number(accuracy = 0.1), #以0.1為最小單位\n        breaks = seq(3, 9, by = 1) #標記3到9\n    )\np\n```\n\n## 直接將縣市標示在圖形旁邊\n\n為了讓讀者更容易辨別每一個線段屬於哪一個縣市，我們可以將縣市的文字標注在線段旁邊。我們首先製作一個資料集用來指定要標記的文字及標注的位置：\n\n```{r}\nloca <- df |> \n    filter(\n        gender == \"female\"\n    ) |> \n    mutate(\n        position = ratio - .25\n    )\nloca\n```\n\n-   因為我們要將文字標記在女性比例的左側，所以我們只保留女性的資料(`filter(gender == \"female\")`)。\n\n-   文字的位置要放在女性比率的左側一點點，所以透過將比率的值減去一點點，新設立一個新變數來表示位置`mutate( position = ratio - .2 )`。\n\n我們使用`geom_text`來標注文字：\n\n```{r}\np <- p + \n    geom_text(data = loca, \n              aes(y = region, \n                  x = position, \n                  label = region, \n                  family = \"Noto Sans TC\"), \n              size = 4) \np\n```\n\n-   因為我們現在要用`loca`來畫圖，所以要將資料設定為`loca`，`data = loca`。\n\n-   在`aes()`中，`x`和`y`是指定文字的座標，`label`則是我們要標記的文字，`family`是中文字型。\n\n目前文字看起來還不是很美觀，我會留在最後再做調整。\n\n## 加入標題及註解\n\n標題及註解能正確的告訴讀者我們所呈現數據的意義，是必不可少的。我們使用`labs()`來加上標題及註解：\n\n```{r}\np <- p +\n  labs(\n        title = \"各縣市身心障礙者佔人口數比率\",\n        subtitle = \"各縣市男性比率皆大於女性，其中台東縣男女間差距最大，澎湖縣則最小\",\n        x = \"身心障礙者佔人口數比率（％）\",\n        caption = c(\"註：男性比率為男性身心障礙人口數除以男性總人口數，女性比率算法以此類推\",\n                    \"資料時間：2023年底．資料來源：衛生福利部統計處\"),\n    ) \np\n```\n\n大致上應該很好理解如何使用，只有兩處要詳細說明：\n\n-   `x`設定x軸的標題，所以我們能以此類推，`y`就是設定y軸的標題。因為我選擇直接將縣市飆在線段旁邊，而且我認為不用加y軸標題也能知道他們代表不同縣市，所以沒有設定y軸標題。\n\n-   在`caption`中，設定了兩段文字，但目前只顯示了其中一個，我們在之後會調整`caption`的位置，那時兩段文字才會都顯示出來。\n\n## 調整圖形的樣式\n\n繪製圖形的最後一步是調整圖形中各要素的呈現方式。\n\n<br>\n\n### 調整兩軸的文字及標記\n\n```{r}\np <- p + theme(\n  axis.title.y = element_blank(),\n  axis.title.x = element_text(size = 12),\n  axis.text.x = element_text(size = 10),\n  axis.text.y = element_blank(),\n  axis.ticks.length = unit(0, \"cm\")\n)\np\n```\n\n-   `axis`開頭的函數是用來調整x軸及y軸相關的要素的。\n\n-   `axis.title`是用來設定軸的標題：\n\n    -   `axis.title.y = element_blank()`是將y軸的標題拿掉，本來是自動設定的factor(region, region_level)。\n\n    -   `axis.title.x = element_text(size = 8)`則是設定x軸標題的大小，也就是「身心障礙者佔人口數比率（％）」這段文字的大小。\n\n-   `axis.text`則是設定軸上的文字，也就是縣市和比率的數值：\n\n    -   因為我們已經將縣市標記在線段旁邊了，所以拿掉x軸上標記縣市的文字\n\n-   `axis.ticks.length`則是設定軸文字旁標記的那個小小線段的長度，我要拿掉它們，所以將長度設定為0。\n\n    <br>\n\n### 調整圖示\n\n```{r}\np <- p + theme(\n        legend.text = element_text(size = 10),\n        legend.position = \"inside\",\n        legend.position.inside = c(.9, .9),\n        legend.background = element_rect(fill = \"transparent\", \n                                         linewidth = .4,\n                                         color = \"#071952\"),\n        legend.title = element_blank()\n)\np\n```\n\n-   `legend.position`和`legend.position.inside`是用來設定圖示的位置，將其設定在圖形的裡面，並調整到一個合適的位置。\n\n-   `legend.background`是用來設定圖是這個方框的，因為是長方形，所以用`element_rect`。\n\n-   `legend.title = element_blank()`則是拿掉圖示的標題。\n\n<br>\n\n### 調整格線\n\n```{r}\np <- p + theme(\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.major.x = element_line(linetype = 2)\n)\np\n```\n\n-   `panel`指的是中間繪圖區的部分，格線要從這裡調整，基本上這裡做的調整是指保留垂直的格線，並設定為虛線。\n\n<br>\n\n### 調整標題、註解的樣式和圖片的邊框\n\n```{r}\n#| warning: false\np <- p + theme(\n    plot.title = element_text(size = 22, \n                              color = \"#071952\", \n                              face = \"bold\",\n                              margin = margin(t = 0, b = 2)),\n    plot.subtitle = element_text(size = 16, margin = margin(b = 5)),\n    plot.caption = element_text(size = 10, hjust = c(0,1)),\n    plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\"),\n)\np\n```\n\n-   `plot`指的是整個圖片，所以標題、註解以及邊界都屬於這裡。\n\n    -   `element_text`中的`margin`可以在文字的周圍加上邊界，`margin()`函數中可以設定`t`、`r`、`b`、`l`四個參數，分別為top、right、bottom、left，可以用trouble這個字來記憶順序。\n\n    -   在`plot.catption`中，`hjust`是用來調整水平位置的，因為我們的caption有兩個，所以給它兩個值，分別代表放在最左邊以及最右邊。\n\n如此一來，我們就得到了目標的圖表了！\n\n<br>\n\n至此，這次的旅程就結束了，歡迎你下次再跟我一起踏上視覺化之旅。\n\n以下是完整的資料處理和視覺化的code\n\n資料處理：\n\n```{r}\n#| eval: false\n#| code-fold: true\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(writexl)\n\n# Helper functions\n\n## tidying the data\nget_gender_longer <- function(df){\n    df <- df |> pivot_longer(\n        cols = c(\"total\", \"male\", \"female\"),\n        names_to = \"gender\",\n        values_to = \"ratio\")\n    return(df)\n}\n\n## adjusting the format of the region data\nadjusting_format_after2021 <- function(df, y){\n    df <- df |> separate_wider_delim(\n        cols = region, \n        delim = \" \",\n        names = c(\"region\", \"2\"),\n        too_many = \"drop\"\n    ) |> \n        select(c(-2))|> \n        mutate(\n            region = if_else(region == \"總計\", \"全國\", region)\n        ) |> \n        mutate(\n            year = y\n        ) |> \n        select(\n            year, region, gender, ratio\n        )\n    return(df)\n}\n\nadjusting_format_before2020 <- function(df, y){\n    df <- df |> separate_wider_position(\n        cols = region, \n        widths = c(region = 3, 1),\n        too_many = \"drop\"\n    ) |> \n        mutate(\n            region = if_else(region == \"總計T\", \"全國\", region)\n        ) |> \n        mutate(\n            year = y\n        ) |> \n        select(\n            year, region, gender, ratio\n        )\n    return(df)\n}\n\n\n## get the ratio data from 2021 to 2023\nget_ratio_after2021 <- function(y){\n    # read the data from an excel file\n    df <- read_xlsx(\"data/2.3.1身心障礙者人數按類別及縣市別分.xlsx\", \n                    sheet = y,\n                    range = anchored(\"A8\", dim = c(23, 17)),\n                    col_names = as.character(1:17)) |>\n        select(c(c(\"1\", \"15\",\"16\", \"17\")))  |> # selecting columns we want\n        rename(\"region\" = \"1\",\n               \"total\" = \"15\",\n               \"male\" = \"16\",\n               \"female\" = \"17\") # rename the columns\n    \n    # tidying the data\n    df <- get_gender_longer(df)\n    \n    # adjusting the format of the region data\n    df <- adjusting_format_after2021(df, y)\n    return(df)\n}\n\n## get the ratio data from 2012 to 2021\nget_ratio_before2020 <- function(y){\n    # read the data from an excel file\n    df <- read_xlsx(\"data/2.3.1身心障礙者人數按類別及縣市別分.xlsx\", \n                    sheet = y,\n                    range = anchored(\"A8\", dim = c(23, 24)),\n                    col_names = as.character(1:24)) |>\n        select(c(c(\"1\", \"22\",\"23\", \"24\")))  |> # selecting columns we want\n        rename(\"region\" = \"1\",\n               \"total\" = \"22\",\n               \"male\" = \"23\",\n               \"female\" = \"24\") # rename the columns\n    \n    # tidying the data\n    df <- get_gender_longer(df)\n    \n    # adjusting the format of the region data\n    df <- adjusting_format_before2020(df, y)\n    return(df)\n}\n\n# main section\ndf_all <- NA\n\nfor(y in 2012:2023){\n    if (y <= 2020) {\n        df <- get_ratio_before2020(as.character(y))\n    } else {\n        df <- get_ratio_after2021(as.character(y))\n    }\n    \n    if (is_tibble(df_all)) {\n        df_all <- rbind(df_all, df)\n    } else {\n        df_all <- df\n    }\n}\n\n#write_csv(df_all, \"data/佔總人數比率.csv\")\n\n```\n\n視覺化：\n\n```{r}\n#| eval: false\n#| code-fold: true\nlibrary(tidyverse)\n\n#read data from a csv file and rename the columns\ndf <- read_csv(\"data/佔總人數比率.csv\",\n               show_col_types = FALSE) |> \n        filter(year == \"2023\",\n               gender %in% c(\"male\", \"female\"))\n   \nregion_level <- df |> \n    select(region) |> \n    distinct(region) |> \n    pull() |> \n    rev()\n\n\np <- ggplot(df, aes(x = ratio, y = factor(region, region_level))) +\n    geom_line(aes(group = region), size = 1.5, color = \"#758694\") +\n    geom_point(aes(color = gender), size = 5) +\n    labs(\n        title = \"各縣市身心障礙者佔人口數比率\",\n        subtitle = \"各縣市男性比率皆大於女性，其中台東縣男女間差距最大，澎湖縣則最小\",\n        x = \"身心障礙者佔人口數比率（％）\",\n        caption = c(\"註：男性比率為男性身心障礙人口數除以男性總人口數，女性比率算法以此類推\",\n                    \"資料時間：2023年底．資料來源：衛生福利部統計處\"),\n    ) +\n    scale_x_continuous(labels = scales::label_number(accuracy = 0.1),\n                       breaks = seq(0, 10, 1)) +\n    scale_color_discrete(labels = c(\"女性\", \"男性\"), \n                         type = c(\"#E76F51\", \"#00B8A9\")) +\n    theme(\n        text = element_text(family = \"Noto Sans TC\", color = \"#364F6B\"),\n        # axis\n        axis.title.y = element_blank(),\n        axis.title = element_text(size = 16),\n        axis.text = element_text(size = 14),\n        axis.text.y = element_blank(),\n        axis.ticks.length = unit(0, \"cm\"),\n        #plot\n        plot.title = element_text(size = 27, \n                                  color = \"#071952\", \n                                  face = \"bold\",\n                                  margin = margin(t = 5, b = 5)),\n        plot.subtitle = element_text(size = 22, margin = margin(b = 15)),\n        plot.caption = element_text(size = 12, hjust = c(0,1)),\n        plot.margin = unit(c(1.2,1.2,1.2,1.2), \"cm\"),\n        #legend\n        legend.text = element_text(size = 14),\n        legend.position = c(.9, .92),\n        legend.background = element_rect(fill = \"transparent\", \n                                         linewidth = .4,\n                                         color = \"#071952\"),\n        legend.title = element_blank(),\n        #panel\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.major.x = element_line(linetype = 2)\n    )\n\nloca <- df |> \n    filter(\n        gender == \"female\"\n    ) |> \n    mutate(\n        ratio = ratio - .2\n    )\n\np <- p + geom_text(data = loca, \n              aes(y = region, x = ratio, label = region, family = \"Noto Sans TC\"), \n              size=5)\np\n# ggsave(\"身心障礙者佔總人口數比率.png\",\n#        path = \"img/\",\n#        width = 16,\n#        height = 10,\n#        dpi = 400)\n\n\n```\n","srcMarkdownNoYaml":"\n\n------------------------------------------------------------------------\n\n在這篇文章中，我會展示如何使用R從Excel檔案中提取資料，並整理成需要的形式，最後再將各縣市男性與女性的身心障礙者人數佔總人口數比率以點圖(dot plot)的方式做視覺化。目標的圖表長這樣： ![](img/身心障礙者佔總人口數比率.png){.lightbox}\n\n# 取得資料並擷取需要的數據\n\n我想取得的資料是：\n\n**2023年各縣市身心障礙者人數佔總人口比率資料，其中包含男性與女性的數據**\n\n## 下載資料\n\n使用的資料是從衛生福利部統計處的[網站](https://dep.mohw.gov.tw/DOS/cp-5337-62357-113.html)下載，在「衛生福利公務統計」\\>「社會福利公務統計一覽表」中的「2.3.1身心障礙者人數按類別及縣市別分」統計表。大致上長這樣：\n\n![](img/截圖.png){fig-align=\"center\"}\n\n統計表是Excel格式，資料內容包含：\n\n-   身心障礙者人數，分男性與女性\n\n-   各類別身心障礙者人數\n\n-   身心障礙者人數佔總人口比率\n\n-   上面三項資料依照各縣市區分\n\n-   從2011年到2023年的資料\n\n我們需要將資料從Excel檔案中提取出來。\n\n## 從Excel表中擷取需要的資料\n\n首先，讓我們先載入需要的library：\n\n```{r}\n#| output: false\nlibrary(tidyverse)\nlibrary(readxl)\n```\n\n-   `tidyverse`是用來整理資料及繪製統計圖表\n\n-   `readxl`則是用來讀取Excel檔案\n\n接著，我們用`readxl`中的`read_xlsx`來讀取人數佔比率的資料：\n\n```{r}\n#| eval: false\nread_xlsx(\"data/2.3.1身心障礙者人數按類別及縣市別分.xlsx\", \n          sheet = \"2023\", \n          range = anchored(\"A8\", dim = c(23, 17)),\n          col_names = as.character(1:17)) |> #從excel檔中提取所需的資料\nselect(\"1\", \"15\",\"16\", \"17\")  |> #挑選需要的變數\nrename(\"region\" = \"1\", #對變數重新命名\n       \"total\" = \"15\",\n       \"male\" = \"16\",\n       \"female\" = \"17\") \n```\n\n我會一項接著一項解釋這段程式碼做了什麼：\n\n-   `read_xlsx`：\n\n    -   第一項要放入Excel檔案的位置。\n\n    -   `sheet`則是指定你要的哪一個資料表，這裡放入`\"2023\"`代表你想要讀取的是名字為「2023」的工作表。如果放入數字的話，則是告訴這個函數要讀取第幾個表，舉例來說，若設定`sheet = 5`則會讀取第5個表。\n\n    -   `range`是用來指定要選取的儲存格範圍。`anchored(\"A8\", dim = c(23, 17))`指定的是儲存格A8向下23列、向右17行的資料。\n\n    -   其他指定資料範圍的方法包括`range = \"B3:D6\"` 來指定一個長方形的左上角及右下角、`range = cell_rows(3:5)`來選取第3到5行的資料，細節可參考[這裡](https://readxl.tidyverse.org/reference/cell-specification.html)。\n\n    -   `col_names = as.character(1:17)`則是暫時給每一個column暫時的名稱。會這麼做的原因是，如果不這麼做，column name中會包含中文，我在寫code的途中這麼做的時候，我的R session不斷地當機，必須改成不包含中文的名稱才能順利讀取資料。\n\n-   從Excel中可以知道第1、15、16、17是我們需要的變數，`select(\"1\", \"15\",\"16\", \"17\")`用來選取我們要的columns。\n\n-   `rename(\"region\" = \"1\", \"total\" = \"15\", \"male\" = \"16\", \"female\" = \"17\")`則是將column name改成更好理解的名稱。\n\n提取出來的資料集，就會包含我們所需要的資料：\n\n```{r}\ndf <- read_xlsx(\"data/2.3.1身心障礙者人數按類別及縣市別分.xlsx\", \n          sheet = \"2023\",\n          range = anchored(\"A8\", dim = c(23, 17)),\n          col_names = as.character(1:17)) |> #從excel檔中提取所需的資料\nselect(\"1\", \"15\",\"16\", \"17\")  |> #挑選需要的變數\nrename(\"region\" = \"1\",\n       \"total\" = \"15\",\n       \"male\" = \"16\",\n       \"female\" = \"17\") #對變數重新命名\n\ndf\n```\n\n# 資料整理\n\n在進入視覺化之前，我們還需對資料做兩項處理：\n\n1.  將地區(region)變數中，縣市英文名稱的部分去除。\n2.  將資料的架構轉換成\"tidy\"的形式，以利使用ggplot來做視覺化。\n\n## 整理地區的文字\n\n你可以觀察到，各縣市的文字中包含縣市的英文，為了能將縣市名稱更簡潔的呈現在圖表中，我們要剔除英文名稱。\n\n首先，我們先將地區名稱中英文的部分分開來：\n\n```{r}\ndf |> separate_wider_delim(\n        cols = region, \n        delim = \" \",\n        names = c(\"region\", \"region_eng\"),\n        too_many = \"drop\"\n    )\n```\n\n-   `separate_wider_delim()`函數的功能是將字串根據某個符號為分界，來分開為不同行。\n\n-   `cols`指定要分開的對象，這裡我們要分開的目標是`region`這一行。\n\n-   `delim`則是指定要以什麼文字或符號分開，這裡我們以中英文之間的空格做區分，所以`delim = \" \"`。\n\n-   `names`是指定你分開後的行要叫什麼名稱。\n\n-   如果以仔細觀察，可以發現`region`中的文字有的包含不只一個空格，因為我們只想以第一個空格做切分，所以設定`too_many = \"drop\"`把多的部分都丟掉\n\n接著我們再把不需要的`region_eng`丟掉，並將`region`中的「總計」轉換成「全國」：\n\n```{r}\ndf <- df |> separate_wider_delim(\n        cols = region, \n        delim = \" \",\n        names = c(\"region\", \"region_eng\"),\n        too_many = \"drop\"\n    ) |> \n    select(-2) |> \n    mutate(\n        region = if_else(region == \"總計\", \"全國\", region)\n    )\ndf\n```\n\n-   `select(-2)`的意思是選擇除了第2行以外的變數。\n\n-   `mutate( region = if_else(region == \"總計\", \"全國\", region) )`則是當`region`中的值是「總計」時用「全國」取代它，其他的時候則保留原本`region`的值。\n\n## 轉換資料架構\n\n我們需要資料是tidy的形式，代表資料集中的每一個行都是一個變數，每一個儲存格中都只儲存一個值(更詳細的定義及解釋可參考[這裡](https://r4ds.hadley.nz/data-tidy))。原本的資料中，性別(gender)這個變數沒有被列在一個行中，而是分別散佈在三個不同的行中，我們可以使用`pivot_longer`做到這件事：\n\n```{r}\ndf <- df |> pivot_longer(\n        cols = c(\"total\", \"male\", \"female\"),\n        names_to = \"gender\",\n        values_to = \"ratio\")\n```\n\n-   `pivot_longer` 是將原本的資料「拉長」，將存於行標題中的資料放到儲存格裡。\n\n-   `cols`指定要轉換的行，我們要將性別的資料放下來到儲存格中，所以設定`cols = c(\"total\", \"male\", \"female\")`。\n\n-   `names_to`指定我們放下來的資料那一行的標題名稱，因為是性別資料，因此設定為`names_to = \"gender\"`。\n\n-   原本在`\"total\", \"male\", \"female\"` 下方的資料是比率，所以透過`values_to = \"ratio\"`將它們命名為`ratio`。\n\n整理完後的資料就會呈現這樣的形式：\n\n```{r}\n#| echo: false\ndf\n```\n\n整理好資料後，我們終於可以進入視覺化的部分。\n\n# 製作視覺化圖表\n\n重新確認我們的目標，我們想要畫出這樣的圖表： ![](img/身心障礙者佔總人口數比率.png){.lightbox}\n\n我會一步一步的說明要如何畫出這樣的圖形。\n\n## 主要圖形\n\n先畫出每個縣市男性與女性比率的點，以及連接的線段：\n\n```{r}\ndf |> \n    filter(gender != \"total\") |>  \n    ggplot(aes(x = ratio, y = region)) +\n    geom_line() +\n    geom_point() \n```\n\n-   因為我們不需要總體的比率，所以用`filter(gender != \"total\")`將它們篩選掉。\n\n-   我們想要將縣市的位置畫在y軸，比率的資料畫在x軸，所以`ggplot`中的`aes`會設定成`aes(x = ratio, y = region)`。\n\n-   `geom_line`及`geom_point`分別畫出線段及點。\n\n為了更容易區分男性及女性的資料，我會將它們塗上不同的顏色。除此之外，還會設定點的大小以及線段的粗細：\n\n```{r}\ndf |> \n    filter(gender != \"total\") |>  \n    ggplot(aes(x = ratio, y = region)) +\n    geom_line(linewidth = 1.5, color = \"#758694\") +\n    geom_point(aes(color = gender), size = 2) \n```\n\n-   `geom_line`中，`linewidth`及`color`是用來調整線的粗細及顏色。\n\n-   `geom_point`中的`aes(color = gender)`則是說我們要根據`gender`這個變數來調整點的顏色。\n\n你應該已經發現了，Ｒ這時沒辦法顯示中文字，我們可以用指定中文字型的方式來解決：\n\n```{r}\ndf |> \n    filter(gender != \"total\") |>  \n    ggplot(aes(x = ratio, y = region)) +\n    geom_line(linewidth = 1.5, color = \"#758694\") +\n    geom_point(aes(color = gender), size = 2) +\n    theme(\n        text = element_text(family = \"Noto Sans TC\")\n    )\n```\n\n-   `theme`函數是用來設定圖表的整體風格的，之後我們會再用到它。\n-   `theme`函數中調整圖案風格的方法大都是以`element_{物件種類}`的方式分做設定。舉例來說，我們要調整的是文字，所以是用`element_text`，如果要調整的物件是線條的話，那就是用`element_line`。\n-   `family = \"Noto Sans TC\"`則是將字體設定為煩繁體中文的思源黑體。\n\n為了保持一致性，我會將縣市間呈現的順序調整成與原始資料集中呈現的一樣。做法是將`region`這個變數調整成Ｒ的factor類型變數，再指定其level，訂定縣市的先後順序。所以我們先做一個表示level的vector：\n\n```{r}\nregion_level <- df |> \n    select(region) |> \n    distinct(region) |> \n    pull() |> \n    rev()\nregion_level\n```\n\n再將`region`轉化為factor：\n\n```{r}\np <- df |> \n    filter(gender != \"total\") |>  \n    ggplot(aes(x = ratio, y = factor(region, region_level))) + #轉換為factor\n    geom_line(linewidth = 1.5, color = \"#758694\") +\n    geom_point(aes(color = gender), size = 2) +\n    theme(\n        text = element_text(family = \"Noto Sans TC\")\n    )\np\n```\n\n## 調整Scale變數\n\n在圖表中，我們在x軸畫出比率的資料，在y軸分別縣市，用顏色區分性別。在ggplot2中，我們可以使用`scale_{aes}_{type}`的方式調整這三項要素呈現的方式，`aes`指的是要設定的要素，`type`則是定義我們設定這個`aes`的方法或要呈現的形式。\n\n**指定不同性別的顏色**\n\n```{r}\np + scale_color_discrete(\n      labels = c(\"女性\", \"男性\"), #改變性別的呈現方式\n      type = c(\"#E76F55\", \"#01B8A9\") #指定顏色\n    )\n```\n\n-   因為要調整的是顏色，所以是`scale_color_{type}`。另外，因為性別是離散的變數，所以是`scale_color_discrete`。\n\n-   `labels`指定的是呈現性別這個變數的標籤，你可以看到右方的圖示改變了。`type`則是指定要呈現的顏色。\n\n**調整x軸標籤的格式**\n\n我們的目標圖形中，x軸的數字是呈現到小數點後一位，我們可以用`scales`這個library來設定：\n\n```{r}\np + scale_x_continuous(\n    labels = scales::label_number(accuracy = 0.1),\n    breaks = seq(3, 9, 1)\n)\n```\n\n-   `scales::label_number(accuracy = 0.1)`是將你所呈現的數字的精準度以0.1為一單位。在`scales` library中，還有其他函數能指定你數值呈現的方式，例如`label_dollar`可以將數字轉化為貨幣的形式，更多細節可以參考[這裡](https://scales.r-lib.org/reference/index.html)。\n\n-   `breaks = seq(3, 9, 1)`則是設定你要呈現標記出數值的地方。用下面這個例子來讓你更暸解其運作方式，如果我們x軸標籤只想要顯示5和8兩個數值：\n\n    ```{r}\n    p + scale_x_continuous(\n        labels = scales::label_number(accuracy = 0.1),\n        breaks = c(5, 8)\n    )\n    ```\n\n將上面2個部分整合起來：\n\n```{r}\np <- p + \n    scale_color_discrete(\n        labels = c(\"女性\", \"男性\"), #性別標籤\n        type = c(\"#E76F55\", \"#01B8A9\") #指定顏色\n    ) +\n    scale_x_continuous(\n        labels = scales::label_number(accuracy = 0.1), #以0.1為最小單位\n        breaks = seq(3, 9, by = 1) #標記3到9\n    )\np\n```\n\n## 直接將縣市標示在圖形旁邊\n\n為了讓讀者更容易辨別每一個線段屬於哪一個縣市，我們可以將縣市的文字標注在線段旁邊。我們首先製作一個資料集用來指定要標記的文字及標注的位置：\n\n```{r}\nloca <- df |> \n    filter(\n        gender == \"female\"\n    ) |> \n    mutate(\n        position = ratio - .25\n    )\nloca\n```\n\n-   因為我們要將文字標記在女性比例的左側，所以我們只保留女性的資料(`filter(gender == \"female\")`)。\n\n-   文字的位置要放在女性比率的左側一點點，所以透過將比率的值減去一點點，新設立一個新變數來表示位置`mutate( position = ratio - .2 )`。\n\n我們使用`geom_text`來標注文字：\n\n```{r}\np <- p + \n    geom_text(data = loca, \n              aes(y = region, \n                  x = position, \n                  label = region, \n                  family = \"Noto Sans TC\"), \n              size = 4) \np\n```\n\n-   因為我們現在要用`loca`來畫圖，所以要將資料設定為`loca`，`data = loca`。\n\n-   在`aes()`中，`x`和`y`是指定文字的座標，`label`則是我們要標記的文字，`family`是中文字型。\n\n目前文字看起來還不是很美觀，我會留在最後再做調整。\n\n## 加入標題及註解\n\n標題及註解能正確的告訴讀者我們所呈現數據的意義，是必不可少的。我們使用`labs()`來加上標題及註解：\n\n```{r}\np <- p +\n  labs(\n        title = \"各縣市身心障礙者佔人口數比率\",\n        subtitle = \"各縣市男性比率皆大於女性，其中台東縣男女間差距最大，澎湖縣則最小\",\n        x = \"身心障礙者佔人口數比率（％）\",\n        caption = c(\"註：男性比率為男性身心障礙人口數除以男性總人口數，女性比率算法以此類推\",\n                    \"資料時間：2023年底．資料來源：衛生福利部統計處\"),\n    ) \np\n```\n\n大致上應該很好理解如何使用，只有兩處要詳細說明：\n\n-   `x`設定x軸的標題，所以我們能以此類推，`y`就是設定y軸的標題。因為我選擇直接將縣市飆在線段旁邊，而且我認為不用加y軸標題也能知道他們代表不同縣市，所以沒有設定y軸標題。\n\n-   在`caption`中，設定了兩段文字，但目前只顯示了其中一個，我們在之後會調整`caption`的位置，那時兩段文字才會都顯示出來。\n\n## 調整圖形的樣式\n\n繪製圖形的最後一步是調整圖形中各要素的呈現方式。\n\n<br>\n\n### 調整兩軸的文字及標記\n\n```{r}\np <- p + theme(\n  axis.title.y = element_blank(),\n  axis.title.x = element_text(size = 12),\n  axis.text.x = element_text(size = 10),\n  axis.text.y = element_blank(),\n  axis.ticks.length = unit(0, \"cm\")\n)\np\n```\n\n-   `axis`開頭的函數是用來調整x軸及y軸相關的要素的。\n\n-   `axis.title`是用來設定軸的標題：\n\n    -   `axis.title.y = element_blank()`是將y軸的標題拿掉，本來是自動設定的factor(region, region_level)。\n\n    -   `axis.title.x = element_text(size = 8)`則是設定x軸標題的大小，也就是「身心障礙者佔人口數比率（％）」這段文字的大小。\n\n-   `axis.text`則是設定軸上的文字，也就是縣市和比率的數值：\n\n    -   因為我們已經將縣市標記在線段旁邊了，所以拿掉x軸上標記縣市的文字\n\n-   `axis.ticks.length`則是設定軸文字旁標記的那個小小線段的長度，我要拿掉它們，所以將長度設定為0。\n\n    <br>\n\n### 調整圖示\n\n```{r}\np <- p + theme(\n        legend.text = element_text(size = 10),\n        legend.position = \"inside\",\n        legend.position.inside = c(.9, .9),\n        legend.background = element_rect(fill = \"transparent\", \n                                         linewidth = .4,\n                                         color = \"#071952\"),\n        legend.title = element_blank()\n)\np\n```\n\n-   `legend.position`和`legend.position.inside`是用來設定圖示的位置，將其設定在圖形的裡面，並調整到一個合適的位置。\n\n-   `legend.background`是用來設定圖是這個方框的，因為是長方形，所以用`element_rect`。\n\n-   `legend.title = element_blank()`則是拿掉圖示的標題。\n\n<br>\n\n### 調整格線\n\n```{r}\np <- p + theme(\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.major.x = element_line(linetype = 2)\n)\np\n```\n\n-   `panel`指的是中間繪圖區的部分，格線要從這裡調整，基本上這裡做的調整是指保留垂直的格線，並設定為虛線。\n\n<br>\n\n### 調整標題、註解的樣式和圖片的邊框\n\n```{r}\n#| warning: false\np <- p + theme(\n    plot.title = element_text(size = 22, \n                              color = \"#071952\", \n                              face = \"bold\",\n                              margin = margin(t = 0, b = 2)),\n    plot.subtitle = element_text(size = 16, margin = margin(b = 5)),\n    plot.caption = element_text(size = 10, hjust = c(0,1)),\n    plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\"),\n)\np\n```\n\n-   `plot`指的是整個圖片，所以標題、註解以及邊界都屬於這裡。\n\n    -   `element_text`中的`margin`可以在文字的周圍加上邊界，`margin()`函數中可以設定`t`、`r`、`b`、`l`四個參數，分別為top、right、bottom、left，可以用trouble這個字來記憶順序。\n\n    -   在`plot.catption`中，`hjust`是用來調整水平位置的，因為我們的caption有兩個，所以給它兩個值，分別代表放在最左邊以及最右邊。\n\n如此一來，我們就得到了目標的圖表了！\n\n<br>\n\n至此，這次的旅程就結束了，歡迎你下次再跟我一起踏上視覺化之旅。\n\n以下是完整的資料處理和視覺化的code\n\n資料處理：\n\n```{r}\n#| eval: false\n#| code-fold: true\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(writexl)\n\n# Helper functions\n\n## tidying the data\nget_gender_longer <- function(df){\n    df <- df |> pivot_longer(\n        cols = c(\"total\", \"male\", \"female\"),\n        names_to = \"gender\",\n        values_to = \"ratio\")\n    return(df)\n}\n\n## adjusting the format of the region data\nadjusting_format_after2021 <- function(df, y){\n    df <- df |> separate_wider_delim(\n        cols = region, \n        delim = \" \",\n        names = c(\"region\", \"2\"),\n        too_many = \"drop\"\n    ) |> \n        select(c(-2))|> \n        mutate(\n            region = if_else(region == \"總計\", \"全國\", region)\n        ) |> \n        mutate(\n            year = y\n        ) |> \n        select(\n            year, region, gender, ratio\n        )\n    return(df)\n}\n\nadjusting_format_before2020 <- function(df, y){\n    df <- df |> separate_wider_position(\n        cols = region, \n        widths = c(region = 3, 1),\n        too_many = \"drop\"\n    ) |> \n        mutate(\n            region = if_else(region == \"總計T\", \"全國\", region)\n        ) |> \n        mutate(\n            year = y\n        ) |> \n        select(\n            year, region, gender, ratio\n        )\n    return(df)\n}\n\n\n## get the ratio data from 2021 to 2023\nget_ratio_after2021 <- function(y){\n    # read the data from an excel file\n    df <- read_xlsx(\"data/2.3.1身心障礙者人數按類別及縣市別分.xlsx\", \n                    sheet = y,\n                    range = anchored(\"A8\", dim = c(23, 17)),\n                    col_names = as.character(1:17)) |>\n        select(c(c(\"1\", \"15\",\"16\", \"17\")))  |> # selecting columns we want\n        rename(\"region\" = \"1\",\n               \"total\" = \"15\",\n               \"male\" = \"16\",\n               \"female\" = \"17\") # rename the columns\n    \n    # tidying the data\n    df <- get_gender_longer(df)\n    \n    # adjusting the format of the region data\n    df <- adjusting_format_after2021(df, y)\n    return(df)\n}\n\n## get the ratio data from 2012 to 2021\nget_ratio_before2020 <- function(y){\n    # read the data from an excel file\n    df <- read_xlsx(\"data/2.3.1身心障礙者人數按類別及縣市別分.xlsx\", \n                    sheet = y,\n                    range = anchored(\"A8\", dim = c(23, 24)),\n                    col_names = as.character(1:24)) |>\n        select(c(c(\"1\", \"22\",\"23\", \"24\")))  |> # selecting columns we want\n        rename(\"region\" = \"1\",\n               \"total\" = \"22\",\n               \"male\" = \"23\",\n               \"female\" = \"24\") # rename the columns\n    \n    # tidying the data\n    df <- get_gender_longer(df)\n    \n    # adjusting the format of the region data\n    df <- adjusting_format_before2020(df, y)\n    return(df)\n}\n\n# main section\ndf_all <- NA\n\nfor(y in 2012:2023){\n    if (y <= 2020) {\n        df <- get_ratio_before2020(as.character(y))\n    } else {\n        df <- get_ratio_after2021(as.character(y))\n    }\n    \n    if (is_tibble(df_all)) {\n        df_all <- rbind(df_all, df)\n    } else {\n        df_all <- df\n    }\n}\n\n#write_csv(df_all, \"data/佔總人數比率.csv\")\n\n```\n\n視覺化：\n\n```{r}\n#| eval: false\n#| code-fold: true\nlibrary(tidyverse)\n\n#read data from a csv file and rename the columns\ndf <- read_csv(\"data/佔總人數比率.csv\",\n               show_col_types = FALSE) |> \n        filter(year == \"2023\",\n               gender %in% c(\"male\", \"female\"))\n   \nregion_level <- df |> \n    select(region) |> \n    distinct(region) |> \n    pull() |> \n    rev()\n\n\np <- ggplot(df, aes(x = ratio, y = factor(region, region_level))) +\n    geom_line(aes(group = region), size = 1.5, color = \"#758694\") +\n    geom_point(aes(color = gender), size = 5) +\n    labs(\n        title = \"各縣市身心障礙者佔人口數比率\",\n        subtitle = \"各縣市男性比率皆大於女性，其中台東縣男女間差距最大，澎湖縣則最小\",\n        x = \"身心障礙者佔人口數比率（％）\",\n        caption = c(\"註：男性比率為男性身心障礙人口數除以男性總人口數，女性比率算法以此類推\",\n                    \"資料時間：2023年底．資料來源：衛生福利部統計處\"),\n    ) +\n    scale_x_continuous(labels = scales::label_number(accuracy = 0.1),\n                       breaks = seq(0, 10, 1)) +\n    scale_color_discrete(labels = c(\"女性\", \"男性\"), \n                         type = c(\"#E76F51\", \"#00B8A9\")) +\n    theme(\n        text = element_text(family = \"Noto Sans TC\", color = \"#364F6B\"),\n        # axis\n        axis.title.y = element_blank(),\n        axis.title = element_text(size = 16),\n        axis.text = element_text(size = 14),\n        axis.text.y = element_blank(),\n        axis.ticks.length = unit(0, \"cm\"),\n        #plot\n        plot.title = element_text(size = 27, \n                                  color = \"#071952\", \n                                  face = \"bold\",\n                                  margin = margin(t = 5, b = 5)),\n        plot.subtitle = element_text(size = 22, margin = margin(b = 15)),\n        plot.caption = element_text(size = 12, hjust = c(0,1)),\n        plot.margin = unit(c(1.2,1.2,1.2,1.2), \"cm\"),\n        #legend\n        legend.text = element_text(size = 14),\n        legend.position = c(.9, .92),\n        legend.background = element_rect(fill = \"transparent\", \n                                         linewidth = .4,\n                                         color = \"#071952\"),\n        legend.title = element_blank(),\n        #panel\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.major.x = element_line(linetype = 2)\n    )\n\nloca <- df |> \n    filter(\n        gender == \"female\"\n    ) |> \n    mutate(\n        ratio = ratio - .2\n    )\n\np <- p + geom_text(data = loca, \n              aes(y = region, x = ratio, label = region, family = \"Noto Sans TC\"), \n              size=5)\np\n# ggsave(\"身心障礙者佔總人口數比率.png\",\n#        path = \"img/\",\n#        width = 16,\n#        height = 10,\n#        dpi = 400)\n\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":300,"fig-asp":0.6,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"include-in-header":["../../../googlefont.html"],"output-file":"身心障礙人數.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.43","editor":"visual","page-layout":"full","theme":"cosmo","mainfont":"Noto Sans TC","title":"身心障礙者人數佔總人口比率-資料取得、整理及視覺化","date":"2024-09-16","description":"展示如何從Excel檔案中提取資料，再以點圖(dot plot)的方式做視覺化。","categories":["R","tidyverse","ggplot","dot plot"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}