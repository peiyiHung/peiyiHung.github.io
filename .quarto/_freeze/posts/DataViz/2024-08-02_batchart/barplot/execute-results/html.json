{
  "hash": "8b02b128ffcfd56e95761ade03144bc8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"如何使用ggplot2繪製長條圖\"\ndate: \"2024-08-02\"\ndescription: \"告訴你如何繪製基本的長條圖並調整長條的顏色、寬度及排列順序。\"\ncategories: [R, ggplot, barplot]\nformat: \n  html:\n    toc: true\neditor: visual\n---\n\n\n\n------------------------------------------------------------------------\n\n這篇文章中，我會呈現使用`ggplot2`繪製長條圖的方法，其中包含如何調整長條的顏色、寬度及排列順序。我會使用R的`tidyverse` package來整理資料及繪製長條，所以要先載入它：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n# 長條圖的基本繪圖方法\n\n首先，我們先製作一個簡單的範例資料，其中包含`name`和`value`變數，`name`是我們要呈現的類別，`value`則是要繪製的長條的長度：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(\n    name = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n    value = c(13, 12, 35, 18, 45)\n)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name value\n1    A    13\n2    B    12\n3    C    35\n4    D    18\n5    E    45\n```\n\n\n:::\n:::\n\n\n\n`data.frame`可以儲存不同型態資料的array，在這個例子中，`data`儲存了一個文字及一個數值的array，並且給了他們名字`name`和`value` 。\n\n`ggplot2`繪製長條圖的步驟大致如下：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = name, y = value)) + \n    geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n`stat` 設定成 `\"identity\"` 是因為這個資料集不需要作轉換，直接畫出值就可以。有一些資料集（tidy形式）則是在根據組別將資料集做分類及篩選後，再對資料作轉換，最常見的是將資料分類後去算有幾個資料項目屬於這個分類，所以default是`stat = \"count\"`。\n\n![](images/1-1.png){fig-align=\"center\" width=\"600\"}\n\n# 控制長條的顏色\n\n在這裡將使用`mtcars`資料集作為範例，這個資料集包含各種不同型號的汽車，我會展示不同汽缸數量的汽車各有幾輛。資料集大概長這樣：\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp\nMazda RX4         21.0   6  160 110\nMazda RX4 Wag     21.0   6  160 110\nDatsun 710        22.8   4  108  93\nHornet 4 Drive    21.4   6  258 110\nHornet Sportabout 18.7   8  360 175\nValiant           18.1   6  225 105\n```\n\n\n:::\n:::\n\n\n\n`cyl`這個變數代表汽缸數量，先將`cyl`這個變數轉變為factor，在之後做圖的過程中會比較方便。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars <- mtcars |> \n    mutate(cyl = as.factor(cyl))\n```\n:::\n\n\n\n## (1) 基本顏色設定\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# color是外框，fill是填滿\nggplot(mtcars, aes(cyl)) +\n    geom_bar(color = \"blue\", fill = rgb(0.1, 0.4, 0.5, 0.7))\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n-   在這裡`ggplot`先根據氣缸的數量將資料做分割，再計算數量，所以這裡的`stat`就是預設的`\"count\"`不需特別指定。\n\n-   `color` 控制的是長條的外框，而非內部的顏色，`fill`才是控制填滿顏色的。\n\n-   `rgb`函數中的4個值分別代表了紅、綠、藍三種顏色，第4個則是透明度。可以分別放入\\[0,1\\]間的數字，數字越大，顏色越深，透明度越低。rgb顏色設定更常見的形式是像這樣 rgb(54, 194, 206)，每個數值是落在\\[0,255\\]這個區間之間，`rgb`函數則是要透過設定`maxColorValue`來達成。例子如下：\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #設定想要的顏色\n    rgb_color <- rgb(54, 194, 206, maxColorValue = 255)\n    \n    #使用顏色畫圖\n    ggplot(mtcars, aes(cyl)) +\n        geom_bar(fill = rgb_color)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](barplot_files/figure-html/unnamed-chunk-7-1.png){width=672}\n    :::\n    :::\n\n\n\n## (2) 使用色相(Hue)\n\n我們可以使用`scalu_fill_hue`來利用設定色相的方法調整顏色：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl, fill = cyl)) +\n    geom_bar() +\n    scale_fill_hue()\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n`scale_fill_hue`會根據`h`這個變量所指定的範圍中，等距的指定顏色。`h`的值會落在\\[0,360\\]間，以順時針的方向指定配色環的範圍：\n\n![](images/colorwheel.png){fig-align=\"center\" width=\"750\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl, fill = cyl)) +\n    geom_bar() +\n    scale_fill_hue(h = c(0, 30))\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl, fill = cyl)) +\n    geom_bar() +\n    scale_fill_hue(h = c(180, 210))\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl, fill = cyl)) +\n    geom_bar() +\n    scale_fill_hue(h = c(0, 180))\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n`scale_fill_hue`中得`c`和`l`則是分別指定深淺及亮度，可以放入\\[0,100\\]中的值：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl, fill = cyl)) +\n    geom_bar() +\n    scale_fill_hue(h = c(0, 180), c = 90) #較大的c\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl, fill = cyl)) +\n    geom_bar() +\n    scale_fill_hue(h = c(0, 180), c = 40) #較小的c\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl, fill = cyl)) +\n    geom_bar() +\n    scale_fill_hue(h = c(0, 180), l = 90) #較大的l\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl, fill = cyl)) +\n    geom_bar() +\n    scale_fill_hue(h = c(0, 180), l = 30) #較小的l\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n## (3) 使用RColorBrewer\n\n`RColorBrewer`提供了幾組可用的顏色：\n\n![](images/1-2.png){fig-align=\"center\"}\n\n用法是在`ggplot2`的`scale_fill_brewer`函數中輸入想要的顏色代碼：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl, fill = cyl)) +\n    geom_bar() +\n    scale_fill_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## (4) 手動設定個別長條的顏色\n\n`scale_fill_manual`讓你可以手動指定顏色，要注意的是指定的顏色數量至少要多於種類的數量。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl, fill = cyl)) + \n    geom_bar() +\n    scale_fill_manual(values = c(\"red\", \"blue\", \"green\"))\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n也可以指定16進位色碼：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl, fill = cyl)) + \n    geom_bar() +\n    scale_fill_manual(values = c(\"#F4CE14\", \"#379777\", \"#45474B\"))\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n或使用`rgb`函數：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolors <- c(\n    rgb(244, 206, 20, maxColorValue = 255),\n    rgb(55, 151, 119, maxColorValue = 255),\n    rgb(69, 71, 75, maxColorValue = 255)\n)\n\nggplot(mtcars, aes(x = cyl, fill = cyl)) + \n    geom_bar() +\n    scale_fill_manual(values = colors)\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n# 繪製橫向長條圖\n\n如果想要使用橫向長條圖的話，可以將`aes()`中`x`與`y`調換：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = value, y = name)) + #調換x和y\n    geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n或是使用`coor_flip`函數：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(y = value, x = name)) +\n    geom_bar(stat = \"identity\") + \n    coord_flip() \n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n# 調整長條寬度\n\n我們可以透過`geom_bar`中的`width`這個argument來調整長條的寬度：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl)) +\n    geom_bar(width = 0.1)\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n`width`中可放入\\[0,1\\]之間的數值，越大越寬：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl)) +\n    geom_bar(width = 0.99) #很寬\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = cyl)) +\n    geom_bar(width = 0.01) #很窄\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n## 不同類別使用不同的寬度\n\n`width`這個aesthetic可以讓你調整個別的長條寬度，我現在`data`中加入一個`width`變數，讓每一個類別根據其數值調整寬度，數值是預設寬度的倍數：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> mutate(\n    width = c(.5, .9, .4, .3, 1) # E是原來的寬度，A則是一半，\n) |> \n    ggplot(aes(x = name, y = value, width = width)) +\n    geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n# 調整長條排列的順序\n\n在`ggplot2`中，如果要根據長條的高度(或長度)做排序，比較方便的做法先算出每一個類型的數量，再根據數量做排序，最後以`stat = \"identity\"` 的設定來畫出圖形。以下的例子會一步一步的展示怎麼做：\n\n\\(1\\) 使用`tidyverse`中的`group_by`函數將資料依汽缸數做分割，再使用`summarise`算出每一種汽缸數的車輛數：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n    group_by(cyl) |> # 分組\n    summarise(n = n()) # 計算數量\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  cyl       n\n  <fct> <int>\n1 4        11\n2 6         7\n3 8        14\n```\n\n\n:::\n:::\n\n\n\n\\(2\\) 使用`fct_order`函數將`cyl`的level按照`n`排序：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n    group_by(cyl) |> \n    summarise(n = n()) |> \n    mutate(cyl = fct_reorder(cyl, n)) #調整levels，根據n的大小\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  cyl       n\n  <fct> <int>\n1 4        11\n2 6         7\n3 8        14\n```\n\n\n:::\n:::\n\n\n\n我們可以看到在重新排序前，`cyl`的levels是\"4\"-\\>\"6\"-\\>\"8\"：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n    group_by(cyl) |> \n    summarise(n = n()) |> \n    str()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [3 × 2] (S3: tbl_df/tbl/data.frame)\n $ cyl: Factor w/ 3 levels \"4\",\"6\",\"8\": 1 2 3\n $ n  : int [1:3] 11 7 14\n```\n\n\n:::\n:::\n\n\n\n重新排序後，`cyl`的levels是\"6\"-\\>\"4\"-\\>\"8\"：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n    group_by(cyl) |> \n    summarise(n = n()) |> \n    mutate(cyl = fct_reorder(cyl, n)) |> \n    str()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [3 × 2] (S3: tbl_df/tbl/data.frame)\n $ cyl: Factor w/ 3 levels \"6\",\"4\",\"8\": 2 1 3\n $ n  : int [1:3] 11 7 14\n```\n\n\n:::\n:::\n\n\n\n\\(3\\) 最後整合起來，畫出圖形：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n    group_by(cyl) |> \n    summarise(n = n()) |> \n    mutate(cyl = fct_reorder(cyl, n)) |> \n    ggplot(aes(x = cyl, y = n)) +\n        geom_bar(stat = \"identity\") #不需計算，所以是\"identity\"\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n若是想要從大排到小，則是要在`fct_reorder`中要排序的依據加上`desc()`：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n    group_by(cyl) |> \n    summarise(n = n()) |> \n    mutate(cyl = fct_reorder(cyl, desc(n))) |> #根據n的大小排序，由大到小\n    ggplot(aes(x = cyl, y = n)) +\n        geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n# 利用顏色強調特定類別\n\n當呈現的類別變數中，有特定的類別是我們想要特別強調的，舉例來說，我們特別關心的類別或數值特別高的類別，我們可以透過標記特別的顏色來強調其重要性，以此引導讀者關注的重點，傳達我們想表達的資訊。\n\n假設我們想要標記下方圖型中，數值最高的E這個類別：\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n我們首先要做的是先製作出一個標記用的變數：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n    mutate(\n        #當name的值是E時，mark的值會是marked，其他則是unmarked\n        mark = if_else(name == \"E\", \"marked\", \"unmarked\")\n    ) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name value     mark\n1    A    13 unmarked\n2    B    12 unmarked\n3    C    35 unmarked\n4    D    18 unmarked\n5    E    45   marked\n```\n\n\n:::\n:::\n\n\n\n接著告訴`ggplot`函數我們要以此變數上不同的顏色：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n    mutate(\n        mark = if_else(name == \"E\", \"marked\", \"unmarked\")\n    ) |> \n    ggplot(aes(x = name, y = value, fill = mark)) +\n    geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n可以手動調整顏色，更加的強調類別，並且關掉圖示：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n    mutate(\n        mark = if_else(name == \"E\", \"marked\", \"unmarked\")\n    ) |> \n    ggplot(aes(x = name, y = value, fill = mark)) +\n    geom_bar(stat = \"identity\") +\n    scale_fill_manual(values = c(\"#EF5A6F\", \"grey\")) + #調整顏色\n    theme(\n        legend.position = \"none\" #關掉圖示\n    )\n```\n\n::: {.cell-output-display}\n![](barplot_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "barplot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}