---
title: "如何使用ggplot2繪製長條圖"
date: "2024-08-02"
description: "告訴你如何繪製基本的長條圖並調整長條的顏色、寬度及排列順序。"
categories: [R, ggplot, barplot]
format: 
  html:
    toc: true
editor: visual
---

------------------------------------------------------------------------

這篇文章中，我會呈現使用`ggplot2`繪製長條圖的方法，其中包含如何調整長條的顏色、寬度及排列順序。我會使用R的`tidyverse` package來整理資料及繪製長條，所以要先載入它：

```{r}
#| output: false
library(tidyverse)
```

# 長條圖的基本繪圖方法

首先，我們先製作一個簡單的範例資料，其中包含`name`和`value`變數，`name`是我們要呈現的類別，`value`則是要繪製的長條的長度：

```{r}
data <- data.frame(
    name = c("A", "B", "C", "D", "E"),
    value = c(13, 12, 35, 18, 45)
)
data
```

`data.frame`可以儲存不同型態資料的array，在這個例子中，`data`儲存了一個文字及一個數值的array，並且給了他們名字`name`和`value` 。

`ggplot2`繪製長條圖的步驟大致如下：

```{r}
ggplot(data, aes(x = name, y = value)) + 
    geom_bar(stat = "identity")
```

`stat` 設定成 `"identity"` 是因為這個資料集不需要作轉換，直接畫出值就可以。有一些資料集（tidy形式）則是在根據組別將資料集做分類及篩選後，再對資料作轉換，最常見的是將資料分類後去算有幾個資料項目屬於這個分類，所以default是`stat = "count"`。

![](images/1-1.png){fig-align="center" width="600"}

# 控制長條的顏色

在這裡將使用`mtcars`資料集作為範例，這個資料集包含各種不同型號的汽車，我會展示不同汽缸數量的汽車各有幾輛。資料集大概長這樣：

```{r}
#| echo: false
head(mtcars[,1:4], )
```

`cyl`這個變數代表汽缸數量，先將`cyl`這個變數轉變為factor，在之後做圖的過程中會比較方便。

```{r}
mtcars <- mtcars |> 
    mutate(cyl = as.factor(cyl))
```

## (1) 基本顏色設定

```{r}
# color是外框，fill是填滿
ggplot(mtcars, aes(cyl)) +
    geom_bar(color = "blue", fill = rgb(0.1, 0.4, 0.5, 0.7))
```

-   在這裡`ggplot`先根據氣缸的數量將資料做分割，再計算數量，所以這裡的`stat`就是預設的`"count"`不需特別指定。

-   `color` 控制的是長條的外框，而非內部的顏色，`fill`才是控制填滿顏色的。

-   `rgb`函數中的4個值分別代表了紅、綠、藍三種顏色，第4個則是透明度。可以分別放入\[0,1\]間的數字，數字越大，顏色越深，透明度越低。rgb顏色設定更常見的形式是像這樣 rgb(54, 194, 206)，每個數值是落在\[0,255\]這個區間之間，`rgb`函數則是要透過設定`maxColorValue`來達成。例子如下：

    ```{r}
    #設定想要的顏色
    rgb_color <- rgb(54, 194, 206, maxColorValue = 255)

    #使用顏色畫圖
    ggplot(mtcars, aes(cyl)) +
        geom_bar(fill = rgb_color)
    ```

## (2) 使用色相(Hue)

我們可以使用`scalu_fill_hue`來利用設定色相的方法調整顏色：

```{r}
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
    geom_bar() +
    scale_fill_hue()
```

`scale_fill_hue`會根據`h`這個變量所指定的範圍中，等距的指定顏色。`h`的值會落在\[0,360\]間，以順時針的方向指定配色環的範圍：

![](images/colorwheel.png){fig-align="center" width="750"}

```{r}
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
    geom_bar() +
    scale_fill_hue(h = c(0, 30))
```

```{r}
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
    geom_bar() +
    scale_fill_hue(h = c(180, 210))
```

```{r}
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
    geom_bar() +
    scale_fill_hue(h = c(0, 180))
```

`scale_fill_hue`中得`c`和`l`則是分別指定深淺及亮度，可以放入\[0,100\]中的值：

```{r}
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
    geom_bar() +
    scale_fill_hue(h = c(0, 180), c = 90) #較大的c
```

```{r}
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
    geom_bar() +
    scale_fill_hue(h = c(0, 180), c = 40) #較小的c
```

```{r}
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
    geom_bar() +
    scale_fill_hue(h = c(0, 180), l = 90) #較大的l
```

```{r}
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
    geom_bar() +
    scale_fill_hue(h = c(0, 180), l = 30) #較小的l
```

## (3) 使用RColorBrewer

`RColorBrewer`提供了幾組可用的顏色：

![](images/1-2.png){fig-align="center"}

用法是在`ggplot2`的`scale_fill_brewer`函數中輸入想要的顏色代碼：

```{r}
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
    geom_bar() +
    scale_fill_brewer(palette = "Dark2")
```

## (4) 手動設定個別長條的顏色

`scale_fill_manual`讓你可以手動指定顏色，要注意的是指定的顏色數量至少要多於種類的數量。

```{r}
ggplot(mtcars, aes(x = cyl, fill = cyl)) + 
    geom_bar() +
    scale_fill_manual(values = c("red", "blue", "green"))
```

也可以指定16進位色碼：

```{r}
ggplot(mtcars, aes(x = cyl, fill = cyl)) + 
    geom_bar() +
    scale_fill_manual(values = c("#F4CE14", "#379777", "#45474B"))
```

或使用`rgb`函數：

```{r}
colors <- c(
    rgb(244, 206, 20, maxColorValue = 255),
    rgb(55, 151, 119, maxColorValue = 255),
    rgb(69, 71, 75, maxColorValue = 255)
)

ggplot(mtcars, aes(x = cyl, fill = cyl)) + 
    geom_bar() +
    scale_fill_manual(values = colors)
```

# 繪製橫向長條圖

如果想要使用橫向長條圖的話，可以將`aes()`中`x`與`y`調換：

```{r}
ggplot(data, aes(x = value, y = name)) + #調換x和y
    geom_bar(stat = "identity")
```

或是使用`coor_flip`函數：

```{r}
ggplot(data, aes(y = value, x = name)) +
    geom_bar(stat = "identity") + 
    coord_flip() 
```

# 調整長條寬度

我們可以透過`geom_bar`中的`width`這個argument來調整長條的寬度：

```{r}
ggplot(mtcars, aes(x = cyl)) +
    geom_bar(width = 0.1)
```

`width`中可放入\[0,1\]之間的數值，越大越寬：

```{r}
ggplot(mtcars, aes(x = cyl)) +
    geom_bar(width = 0.99) #很寬
```

```{r}
ggplot(mtcars, aes(x = cyl)) +
    geom_bar(width = 0.01) #很窄
```

## 不同類別使用不同的寬度

`width`這個aesthetic可以讓你調整個別的長條寬度，我現在`data`中加入一個`width`變數，讓每一個類別根據其數值調整寬度，數值是預設寬度的倍數：

```{r}
data |> mutate(
    width = c(.5, .9, .4, .3, 1) # E是原來的寬度，A則是一半，
) |> 
    ggplot(aes(x = name, y = value, width = width)) +
    geom_bar(stat = "identity")
```

# 調整長條排列的順序

在`ggplot2`中，如果要根據長條的高度(或長度)做排序，比較方便的做法先算出每一個類型的數量，再根據數量做排序，最後以`stat = "identity"` 的設定來畫出圖形。以下的例子會一步一步的展示怎麼做：

\(1\) 使用`tidyverse`中的`group_by`函數將資料依汽缸數做分割，再使用`summarise`算出每一種汽缸數的車輛數：

```{r}
mtcars |> 
    group_by(cyl) |> # 分組
    summarise(n = n()) # 計算數量
```

\(2\) 使用`fct_order`函數將`cyl`的level按照`n`排序：

```{r}
mtcars |> 
    group_by(cyl) |> 
    summarise(n = n()) |> 
    mutate(cyl = fct_reorder(cyl, n)) #調整levels，根據n的大小
```

我們可以看到在重新排序前，`cyl`的levels是"4"-\>"6"-\>"8"：

```{r}
mtcars |> 
    group_by(cyl) |> 
    summarise(n = n()) |> 
    str()
```

重新排序後，`cyl`的levels是"6"-\>"4"-\>"8"：

```{r}
mtcars |> 
    group_by(cyl) |> 
    summarise(n = n()) |> 
    mutate(cyl = fct_reorder(cyl, n)) |> 
    str()
```

\(3\) 最後整合起來，畫出圖形：

```{r}
mtcars |> 
    group_by(cyl) |> 
    summarise(n = n()) |> 
    mutate(cyl = fct_reorder(cyl, n)) |> 
    ggplot(aes(x = cyl, y = n)) +
        geom_bar(stat = "identity") #不需計算，所以是"identity"
```

若是想要從大排到小，則是要在`fct_reorder`中要排序的依據加上`desc()`：

```{r}
mtcars |> 
    group_by(cyl) |> 
    summarise(n = n()) |> 
    mutate(cyl = fct_reorder(cyl, desc(n))) |> #根據n的大小排序，由大到小
    ggplot(aes(x = cyl, y = n)) +
        geom_bar(stat = "identity")
```

# 利用顏色強調特定類別

當呈現的類別變數中，有特定的類別是我們想要特別強調的，舉例來說，我們特別關心的類別或數值特別高的類別，我們可以透過標記特別的顏色來強調其重要性，以此引導讀者關注的重點，傳達我們想表達的資訊。

假設我們想要標記下方圖型中，數值最高的E這個類別：

```{r}
#| echo: false
data |> 
    ggplot(aes(x = name, y = value)) +
    geom_bar(stat = "identity")
```

我們首先要做的是先製作出一個標記用的變數：

```{r}
data |>
    mutate(
        #當name的值是E時，mark的值會是marked，其他則是unmarked
        mark = if_else(name == "E", "marked", "unmarked")
    ) 
```

接著告訴`ggplot`函數我們要以此變數上不同的顏色：

```{r}
data |>
    mutate(
        mark = if_else(name == "E", "marked", "unmarked")
    ) |> 
    ggplot(aes(x = name, y = value, fill = mark)) +
    geom_bar(stat = "identity")
```

可以手動調整顏色，更加的強調類別，並且關掉圖示：

```{r}
data |>
    mutate(
        mark = if_else(name == "E", "marked", "unmarked")
    ) |> 
    ggplot(aes(x = name, y = value, fill = mark)) +
    geom_bar(stat = "identity") +
    scale_fill_manual(values = c("#EF5A6F", "grey")) + #調整顏色
    theme(
        legend.position = "none" #關掉圖示
    )
```
